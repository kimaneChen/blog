datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  role                 String?
  accounts             Account[]
  sessions             Session[]
  blogs                Blog[]
  comments             Comment[]
  replies              Reply[]
  commentNotifications CommentNotification[]
  occupation    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  title         String
  description   String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          Tag[]
  content       Json?
  unpublishedAt DateTime?
  comments      Comment[]
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  Blog Blog[]
}

model Comment {
  id           String               @id @default(cuid())
  blogId       String
  blog         Blog                 @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      String
  replies      Reply[]
  notification CommentNotification?
}

model CommentNotification {
  id        String    @id @default(cuid())
  commentId String    @unique
  comment   Comment   @relation(fields: [commentId], references: [id])
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime?
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  replyToId String?
  replyTo   Reply?   @relation("replyTo", fields: [replyToId], references: [id], onDelete: Cascade)
  replyFrom Reply[]  @relation("replyTo")
}
